{"name":"Mocha Suit","tagline":"Mocha Suit - the way to improve your tests.","body":"# Mocha Suit - the way to improve your tests.\r\n\r\nIt's a simple wrapper for your Mocha tests to make them a bit more OOP like.\r\n\r\n----\r\n\r\n## Motivation ##\r\n\r\nThe main rule of any test you create is *TEST should be simple as much as posible*.\r\nUnfortunately JavaScript which is my the most loved programing language is so elegant and simple that sometimes it's become a problem when you create something  more or less complicated.\r\n\r\nTo be honest all we know JS is object oriented language just partially. This is the reason why it's not so easy to create test framework on JavaScript so cool as for example jUnit in Java. In most cases it's ok to follow algorithmic approach with all these *describes*/*before*/*it*/*after* when you create some simple stuff. But basically it does not encourage you to reuse your code. And at some point you start to share your variables and methods between your *describes* in common closure or (ohh no!) in global object. Then you create your own wrappers upon test modules, move  helpers from neighboring modules and so on. And finally you reinvent the wheel and create your own test generation script. \r\n\r\nSo I did. Almost did\r\n\r\n## Installation ##\r\n\r\n```sh\r\n# from NPM\r\n$ npm install --save-dev mocha-suit\r\n\r\n# last version from GIT\r\n$ git clone https://github.com/muonjs/mocha-suit.git\r\n$ cd ../mocha-suit\r\n$ sudo npm link .\r\n$ cd ~/PathToYourSuperProject\r\n$ npm link mocha-suit\r\n```\r\n\r\n## Description ##\r\n\r\nMocha Suit is the wrapper upon the [Mocha](http://mochajs.org/) test framework. It helps you to incapsulate your tests within the class object (named **Suit**) with it's own setup (`before` and `beforeEach`), teardown (`after` and `afterEach`) methods and testcases (`it`) themselves. Literally Suit is a `describe` block of Mocha with it's own testcases.\r\n\r\n```js\r\nvar MochaSuit = require(\"mocha-suit\");\r\nvar Suit = MochaSuit(\"Your first test suit\");\r\nSuit.before(function() { ... });\r\nSuit.it(\"test it!\",function() { ... });\r\nSuit.after(function() { ... });\r\nnew Suit();\r\n/* ----------- will generate ----------- */\r\ndescribe(\"Your first test suit\",function() {\r\n    before(function() { ... });\r\n    it(\"test it!\",function() { ... });\r\n    after(function() { ... });\r\n});\r\n```\r\n\r\nSuit could be extended to new sub suit, that means you place another `describe` block inside of top one.\r\n\r\n```js\r\nvar MochaSuit = require(\"mocha-suit\");\r\nvar TopSuit = MochaSuit(\"Top test suit\");\r\nTopSuit.before(function() { ... });\r\n\r\nvar Suit = TopSuit.extend(\"Some specific suit\");\r\nSuit.before(function() { ... });\r\nSuit.it(\"test it!\",function() { ... });\r\nSuit.after(function() { ... });\r\nnew Suit();\r\n/* ----------- will generate ----------- */\r\ndescribe(\"Top test suit\",function() {\r\n    before(function() { ... });\r\n    describe(\"Some specific suit\",function() {\r\n        before(function() { ... });\r\n        it(\"test it!\",function() { ... });\r\n        after(function() { ... });\r\n    })\r\n});\r\n```\r\nMocha Suit is complient to Mocha. So `this` is always Mocha's `this` object which is accessible inside of all Mocha's setup and test methods when you run them in usual manner.  Also you can use `done` argument to call methods asyncronously (or return Promise object).\r\n\r\n```js\r\nSuit.before(function(done) {\r\n  this.timeout(3000);\r\n  setTimeout(done,2000);\r\n});\r\n\r\nSuit.before(function() {\r\n  return Promise.delay(2000);\r\n});\r\n\r\n/* ----------- will generate ----------- */\r\nbefore(function(done) {\r\n  this.timeout(3000);\r\n  setTimeout(done,2000);\r\n});\r\n\r\nbefore(function() {\r\n  return Promise.delay(2000);\r\n});\r\n```\r\n\r\nIs that all? Nope. Welcome to the [wiki](https://github.com/muonjs/mocha-suit/wiki) for the rest cool stuff.\r\n\r\n## Usage ##\r\n\r\nMocha Suit depends on Mocha. So you need to initialize Mocha before run your tests. Simplest way is to put your tests in `/test/` directory and then run `mocha` from console. Since Suit is just a wrapper you can utilize any mocha options and arguments you want. For more info visit Mocha's [documentation](https://github.com/mochajs/mocha/wiki).\r\n\r\n## Jasmine ##\r\nAre you [Jasmine](http://jasmine.github.io/) lover and Mocha hater? Superficial difference between Mocha and Jasmine is setup/teardown methods naming. Specifically `before` is known as `beforeAll` and `after` is known as `afterAll`. Mocha Suit suports both versions. Since Mocha Suit is barely wrapper it has no matter what you do inside of your test code or witch helper library (for ex. spies, assertions or matchers) you use. So next one code should be ok:\r\n```js\r\nvar MochaSuit = require(\"mocha-suit\");\r\nvar Suit = MochaSuit(\"Test suit\");\r\nSuit.before(function() { ... }); // won't have effect in jasmine\r\nSuit.beforeAll(function() { ... }); // won't have effect in mocha\r\nSuit.it(\"test it!\",function() { ... });\r\nSuit.after(function() { ... }); // won't have effect in jasmine\r\nSuit.afterAll(function() { ... }); // won't have effect in mocha\r\nnew Suit();\r\n```\r\nEvery time test is generated Suit checks whether method exists in global object or not. If `beforeAll` is absent it won't run. And vice versa.\r\n\r\nYou can ask me: \"Why is library name *Mocha* Suit? Why not *Jasmine* Suit or merely *Test* Suit?\". The answer is I don't know Jasmine so well as Mocha. So I suppose some pitfalls may exist. I'll appreciate any help to make Suit to be more universal.\r\n\r\n## Test && Contribution ##\r\nTo run tests:\r\n```bash\r\n$ npm test\r\n```\r\nSince `Mocha` is dev dependency of Mocha Suit this call envokes *mocha* under `./test/tests` directory with options passed to `./test/mocha.opts`. Alternative way to do the same thing is:\r\n```bash\r\n$ mocha -R spec # or whatever reporter you like\r\n```\r\n\r\nFor Jasmine's fans there is `./spec/support/jasmine.conf` tuning Jasmine to run the same tests inside of alternative environment.\r\n```bash\r\n$ jasmine\r\n```\r\n\r\nOf course all pull requests are welcomed.\r\n\r\n## Documentation && Translation ##\r\nSince English isn't my native language I'll appreciate any pull requests with REAME corrections as well as request with translations to any other languages.\r\n\r\n## License ##\r\nThis project is distributed under [MIT license](https://github.com/muonjs/mocha-suit/blob/master/LICENSE). 2016.\r\n","google":"UA-72173529-3","note":"Don't delete this file! It's used internally to help with page regeneration."}